#!/usr/bin/env bash
action=$1

# Set script name and full path early.
TODO_SH=$(basename "$0")
TODO_FULL_SH="$0"
export TODO_SH TODO_FULL_SH


TODO_FILE="$HOME/.todo/todo.txt"
DONE_FILE="$HOME/.todo/done.txt"
TODO_DIR="$HOME/.todo/"


if [[ ! -e $TODO_FILE ]]; then
	echo "making $TODO_FILE"
	mkdir $TODO_DIR
	touch $TODO_FILE
fi
if [[ ! -e $DONE_FILE ]]; then
	echo "making $DONE_FILE"
	touch $DONE_FILE
fi

oneline_usage="$TODO_SH [-fhpantvV] [-d todo_config] action [task_number] [task_description]"


usage()
{
    cat <<-EndUsage
		Usage: $oneline_usage
		Try '$TODO_SH -h' for more information.
EndUsage
    exit 1
}

shorthelp()
{
    cat <<-EndHelp
		  Usage: $oneline_usage
		  Actions:
		    add|a "THING I NEED TO DO +project @context"
		    del|rm ITEM# [TERM]
		    done|do ITEM#[, ITEM#, ITEM#, ...]
		    help [ACTION...]
		    list|ls [TERM...]
		    listall|lsa [TERM...]
		    shorthelp
		  Actions can be added and overridden using scripts in the actions
		  directory.
EndHelp
}

help()
{
    cat <<-EndOptionsHelp
		  Usage: $oneline_usage
		  Options:
			-h: help
EndOptionsHelp
}

_addto() {
    file="$1"
    input="$2"
    echo "$input" >> "$file"
}

getPrefix()
{
    local base
    base=$(basename "${1:-$TODO_FILE}")
	TOTALTASKS=$(cat ${1:-$TODO_FILE} ${2:-$DONE_FILE} | wc -l)
	NUMTASKS=$(cat ${1:-$TODO_FILE} $2 | wc -l)
	echo "$(cat ${1:-$TODO_FILE} $2| nl)"
	# if [[ $TOTALTASKS -gt 10 ]]; then
	# 	NUMTASKS=10
	# 	echo "$(cat ${1:-$TODO_FILE} | head)"
	# else
	# 	NUMTASKS=${TOTALTASKS}
	# 	echo "$(cat ${1:-$TODO_FILE})"
	# fi

	export NUMTASKS
	export TOTALTASKS
}

_list() {
    local FILE="$1"
    src="$FILE"
    echo "--"
	getPrefix "$src"
	local tasks=$(getPrefix "$src")
    echo "${NUMTASKS:-0} of ${TOTALTASKS:-0} tasks shown"
}

die()
{
    echo "$*"
    exit 1
}


# == PROCESS OPTIONS ==
while getopts ":fhpcnNaAtTvVx+@Pd:" Option
do
  case $Option in
    h)
        set -- '-h' 'shorthelp'
        OPTIND=2
		action=shorthelp
        ;;
    *)
        usage
        ;;
  esac
done
shift $((OPTIND - 1))



## Only run if $action isn't found in .todo.actions.d
case $action in
"add" | "a")
    if [[ -z "$2" ]]; then
        echo -n "Add: "
        read -e -r input
    else
        [ -z "$2" ] && die "usage: $TODO_SH add \"TODO ITEM\""
        shift
        input=$*
    fi
    _addto "$TODO_FILE" "$input"
    ;;

"del" | "rm" )
	shift
    errmsg="usage: $TODO_SH del ITEM# [TERM]"
	TaskNum=$1
	if [[ -z $( cat $TODO_FILE |sed -n $1p) ]]; then
		echo "The task does not exist"
	else
		echo "$(cat $TODO_FILE |sed -n $1p)" "is delited."
		todoalllist=$(cat $TODO_FILE | awk -v row=$1 'NR!=row')
		if [[ -z $todoalllist ]]; then
			cat /dev/null > $TODO_FILE
		else
			echo "$todoalllist" > $TODO_FILE
		fi
	fi
	shift
    ;;


"do" | "done" )
	shift
	if [[ -z $1 ]]; then
		usage
	else
		TaskNum=$1
		if [[ -z $( cat $TODO_FILE |sed -n $1p) ]]; then
			echo "The task does not exist"
		else
			cat $TODO_FILE |sed -n $1p >> $DONE_FILE
			echo "$(cat $TODO_FILE |sed -n $1p)" "is Done."
			todoalllist=$(cat $TODO_FILE | awk -v row=$1 'NR!=row')
			if [[ -z $todoalllist ]]; then
				echo "all tasks are complited!"
				cat /dev/null > $TODO_FILE
			else
				echo "$todoalllist" > $TODO_FILE
			fi
		fi
		shift
	fi

	;;



"help" )
    shift  ## Was help; new $1 is first help topic / action name
    if [ $# -gt 0 ]; then
        # Don't use PAGER here; we don't expect much usage output from one / few actions.
        actionUsage "$@"
    else
        if [ -t 1 ] ; then # STDOUT is a TTY
            if which "${PAGER:-less}" >/dev/null 2>&1; then
                # we have a working PAGER (or less as a default)
                help | "${PAGER:-less}" && exit 0
            fi
        fi
        help # just in case something failed above, we go ahead and just spew to STDOUT
    fi
    ;;

"shorthelp" )
    if [ -t 1 ] ; then # STDOUT is a TTY
        if which "${PAGER:-less}" >/dev/null 2>&1; then
            # we have a working PAGER (or less as a default)
            shorthelp | "${PAGER:-less}" && exit 0
        fi
    fi
    shorthelp # just in case something failed above, we go ahead and just spew to STDOUT
    ;;

"list" | "ls" | "l")
    shift  ## Was ls; new $1 is first search term
    _list "$TODO_FILE" "$@"
    ;;

"listall" | "lsa" | "la" )
    shift  ## Was lsa; new $1 is first search term
	_list "$TODO_FILE"
	echo "Done------"
	_list "$DONE_FILE"
    ;;


* )
    _list "$TODO_FILE" "$@"


esac
